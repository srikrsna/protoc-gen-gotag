syntax = "proto3";

package example;

import "tagger/tagger.proto";

option go_package = "github.com/srikrsna/protoc-gen-gotag/example";

message Example {
    string with_new_tags = 1 [(tagger.tags) = "graphql:\"withNewTags,optional\"" ];
    string with_new_multiple = 2 [(tagger.tags) = "graphql:\"withNewTags,optional\" xml:\"multi,omitempty\"" ];
    
    optional string replace_default = 3 [(tagger.tags) = "json:\"replacePrevious\""] ; 

    oneof one_of {
        option (tagger.oneof_tags) = "graphql:\"withNewTags,optional\"";
        string a = 5 [(tagger.tags) = "json:\"A\""];
        int32 b_jk = 6 [(tagger.tags) = "json:\"b_Jk\""];
    }
    uint32 order = 7 [(tagger.tags) = "bun:\"order\""];
    uint32 pk = 8 [(tagger.tags) = "bun:\"pk,pk,type:integer,autoincrement\""];
    string uuid = 9 [(tagger.tags) = "bun:\"uuid,type:uuid,default:uuid_generate_v4()\""];
}

message SecondMessage {
    string with_new_tags = 1 [(tagger.tags) = "graphql:\"withNewTags,optional\"" ];
    string with_new_multiple = 2 [(tagger.tags) = "graphql:\"withNewTags,optional\" xml:\"multi,omitempty\"" ];
    
    string replace_default = 3 [(tagger.tags) = "json:\"replacePrevious\""] ; 
}

message ThirdExample {
    message InnerExample {
        string id = 1 [(tagger.tags) = "json:\"yes\""];
        int32 yes = 2 [(tagger.tags) = "json:\"id\""];
    }

    InnerExample inner_example = 1 [(tagger.tags) = "json:\"inner\""];
}